@inject IMediaLibraryApiWrapper MediaLibraryApi
@inject NavigationManager NavManager

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2><MudIcon Icon="@Icons.Material.Filled.Link" Class="icon" />  Связь артиста и жанра</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Blazorise.Color.Primary" Clicked="OpenCreateModal">
                    Добавить связь артиста и жанра
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="DtoParticipationDetails"
                  Data="_participations"
                  Responsive
                  Striped>
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="DtoParticipationDetails"
                                Field="@nameof(DtoParticipationDetails.GenreId)"
                                Caption="Действия">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Blazorise.Color.Primary">
                                Действия
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="() => OpenEditPageAsync(context)">
                                    Редактировать
                                </DropdownItem>
                                <DropdownItem Clicked="() => DeleteGradeAsync(context)">
                                    Удалить
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="DtoParticipationDetails"
                                Field="@nameof(DtoParticipationDetails.GenreId)"
                                Caption="Идентификатор жанра">
                </DataGridColumn>
                <DataGridColumn TItem="DtoParticipationDetails"
                                Field="@nameof(DtoParticipationDetails.ArtistId)"
                                Caption="Идентификатор артиста">
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<ParticipationCreateModal @ref="ParticipationCreateModal" OnParticipationAdded="@HandleParticipationAdded" />

@code {
    [Parameter]
    public EventCallback OnDataChanged { get; set; }

    private List<DtoParticipationDetails> _participations = new();

    private ParticipationCreateModal ParticipationCreateModal { get; set; } = new();

    private async Task LoadParticipations()
    {
        var response = await MediaLibraryApi.GetAllParticipationArtistGenre();
        if (response != null)
        {
            _participations = response.ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadParticipations();
        await base.OnInitializedAsync();
    }

    private void OpenEditPageAsync(DtoParticipationDetails context)
    {
        NavManager.NavigateTo($"participations/{context.GenreId}");
    }

    private async Task DeleteGradeAsync(DtoParticipationDetails context)
    {
        await MediaLibraryApi.DeleteParticipationArtistGenre(context.GenreId, context.ArtistId, context.GenreId.ToString());
        await LoadParticipations();
        await OnDataChanged.InvokeAsync();
    }

    private async Task HandleParticipationAdded()
    {
        await LoadParticipations();
        await OnDataChanged.InvokeAsync();
    }

    private async Task OpenCreateModal() => await ParticipationCreateModal.Show();

}