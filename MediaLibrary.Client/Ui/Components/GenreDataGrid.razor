@inject IMediaLibraryApiWrapper MediaLibraryApi
@inject NavigationManager NavManager

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Жанры</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">
                    Создать
                </Button>
                @if (IsNested)
                {
                    <Button Color="Color.Secondary" Clicked="OpenLinkModal">
                        Привязать
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="DtoGenreDetails"
                  Data="DtoGenreDetails"
                  Responsive
                  Striped>
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="DtoGenreDetails"
                                Field="@nameof(DtoGenreDetails.Id)"
                                Caption="Действия">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                Действия
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="() => OpenEditPageAsync(context)">
                                    Редактировать
                                </DropdownItem>
                                <DropdownItem Clicked="() => DeleteAuthorAsync(context)">
                                    Удалить
                                </DropdownItem>
                                @if (IsNested)
                                {
                                    <DropdownItem Clicked="() => UnlinkAuthorAsync(context)">
                                        Отвязать
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="DtoGenreDetails"
                                Field="@nameof(DtoGenreDetails.Name)"
                                Caption="Название">
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<GenreCreateModal @ref="GenreCreateModal" IsNested="IsNested" ParticipationId="ParticipationId" OnGenreAdded="@HandleGenreAdded" />

<GenreLinkModal @ref="GenreLinkModal" ParticipationId="ParticipationId" OnGenreAdded="@HandleGenreAdded"/>

@code {
    [Parameter]
    public bool IsNested { get; set; }
    [Parameter]
    public int ParticipationId { get; set; }
    [Parameter]
    public EventCallback OnDataChanged { get; set; }

    private IList<DtoGenreDetails> Genres { get; set; } = [];
    private GenreCreateModal GenreCreateModal { get; set; } = new();
    private GenreLinkModal GenreLinkModal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAuthorCollection();
        await base.OnInitializedAsync();
    }

    private void OpenEditPageAsync(DtoGenreDetails context)
    {
        NavManager.NavigateTo($"authors/{context.Id}");
    }

    private async Task UnlinkAuthorAsync(DtoGenreDetails context)
    {
        var bookAuthors = (await BookStoreApi.GetAllBooksAuthors()).Where(ba => ba.AuthorId == context.Id);
        foreach (var ba in bookAuthors)
            await BookStoreApi.DeleteBookAuthor(ba.Id);
        await RefreshAuthorCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task DeleteAuthorAsync(AuthorDto context)
    {
        await UnlinkAuthorAsync(context);
        await BookStoreApi.DeleteAuthor(context.Id);
        await RefreshAuthorCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task HandleAuthorAdded()
    {
        await RefreshAuthorCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task OpenCreateModal() => await AuthorCreateModal.Show();

    private async Task OpenLinkModal() => await AuthorLinkModal.Show();

    private async Task RefreshAuthorCollection() =>
            Authors = IsNested
            ? await BookStoreApi.GetBookAuthors(BookId!.Value)
            : await BookStoreApi.GetAllAuthors();
}