@inject IMediaLibraryApiWrapper MediaLibraryApi
@inject NavigationManager NavManager

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Жанры</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">
                    Создать
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="DtoGenreDetails"
                  Data="DtoGenreDetails"
                  Responsive
                  Striped>
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="DtoGenreDetails"
                                Field="@nameof(DtoGenreDetails.Id)"
                                Caption="Действия">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                Действия
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="() => OpenEditPageAsync(context)">
                                    Редактировать
                                </DropdownItem>
                                <DropdownItem Clicked="() => DeleteGenreAsync(context)">
                                    Удалить
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="DtoGenreDetails"
                                Field="@nameof(DtoGenreDetails.Name)"
                                Caption="Название">
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<GenreCreateModal @ref="GenreCreateModal" artistId="artistId" OnGenreAdded="@HandleGenreAdded" />

<GenreUpdateModal @ref="GenreUpdateModal" artistId="artistId" OnGenreAdded="@HandleGenreAdded" />

@code {
    [Parameter]
    public bool IsNested { get; set; }
    [Parameter]
    public int artistId { get; set; }
    [Parameter]
    public EventCallback OnDataChanged { get; set; }

    private IEnumerable<DtoGenreDetails> Genres { get; set; } = [];
    private GenreCreateModal GenreCreateModal { get; set; } = new();
    private GenreUpdateModal GenreUpdateModal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshGenreCollection();
        await base.OnInitializedAsync();
    }

    private void OpenEditPageAsync(DtoGenreDetails context)
    {
        NavManager.NavigateTo($"Genres/{context.Id}");
    }

    private async Task UnUpdateGenreAsync(DtoGenreDetails context)
    {
        var participations = (await MediaLibraryApi.GetAllParticipationArtistGenre()).Where(ga => ga.GenreId == context.Id);
        foreach (var ga in participations)
            await MediaLibraryApi.DeleteParticipationArtistGenre(ga.GenreId, null, null);
        await RefreshGenreCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task DeleteGenreAsync(DtoGenreDetails context)
    {
        await UnUpdateGenreAsync(context);
        await MediaLibraryApi.DeleteGenre(context.Id);
        await RefreshGenreCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task HandleGenreAdded()
    {
        await RefreshGenreCollection();
        await OnDataChanged.InvokeAsync();
    }

    private async Task OpenCreateModal() => await GenreCreateModal.Show();

    private async Task OpenUpdateModal() => await GenreUpdateModal.Show();

    private async Task RefreshGenreCollection() => await MediaLibraryApi.GetAllGenre();
}