// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi;

#nullable disable

namespace MediaLibrary.Classes.Migrations
{
    [DbContext(typeof(MediaLibraryDbContext))]
    [Migration("20241206111053_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MediaLibrary.Classes.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("IdArtist");

                    b.Property<DateTime>("Release")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Release");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("MediaLibrary.Classes.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("MediaLibrary.Classes.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MediaLibrary.Classes.ParticipationArtistGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("IdArtist");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("IdGenre");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.ToTable("ParticipationArtistGenre");
                });

            modelBuilder.Entity("MediaLibrary.Classes.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("AlbumId");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)")
                        .HasColumnName("Duration");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Title");

                    b.Property<int>("TrackNum")
                        .HasColumnType("int")
                        .HasColumnName("TrackNum");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("MediaLibrary.Classes.Album", b =>
                {
                    b.HasOne("MediaLibrary.Classes.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MediaLibrary.Classes.ParticipationArtistGenre", b =>
                {
                    b.HasOne("MediaLibrary.Classes.Artist", "Artist")
                        .WithMany("ParticipationArtistGenres")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaLibrary.Classes.Genre", "Genre")
                        .WithMany("ParticipationArtistGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MediaLibrary.Classes.Track", b =>
                {
                    b.HasOne("MediaLibrary.Classes.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MediaLibrary.Classes.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MediaLibrary.Classes.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("ParticipationArtistGenres");
                });

            modelBuilder.Entity("MediaLibrary.Classes.Genre", b =>
                {
                    b.Navigation("ParticipationArtistGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
